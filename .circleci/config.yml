version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
                
  test-backend:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
            
  scan-frontend:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      # Docker image here
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

version: 2.1
orbs:
  slack: circleci/slack@4.12.0
commands: 
   destroy_backend:
     steps:
       - run:
           name: Destroy backend
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
               aws cloudformation delete-stack \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --region us-east-1
   destroy_frontend:
      steps:
       - run:
           name: Destroy frontend
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           when: on_fail
           command: |
               aws cloudformation delete-stack \
               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
               --region us-east-1



jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: frontend-end test
          command: |    
            cd frontend
            npm install
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend-end test
          command: |    
            cd backend
            npm install
            npm run test
      # Checkout code from git
      # Restore from cache
      # Your job code here
  scan-frontend:
    docker:
            - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: frontend-end scan
          command: | 
            cd frontend
            npm install
            #npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      

  scan-backend:
    docker:
           - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: backend-end scan
          command: | 
            cd backend
            npm install
            #npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  deploy-infrastructure:
      docker:
         - image: amazon/aws-cli
      steps:
       - checkout
       - run: yum install -y tar gzip
       - run: set +o pipefail
      
       - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
               --tags project=udapeople \
               --region us-east-1     
       - run:
          name: Add back-end ip to ansible inventory
          command: |
           
              aws --region us-east-1 \
              ec2 describe-instances \
              --filters \
              "Name=instance-state-name,Values=running" \
              "Name=instance.group-name,Values=UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].[PublicIpAddress]' \
              --output text >> ~/project/.circleci/ansible/inventory.txt
          
              
               invent=$(cat ~/project/.circleci/ansible/inventory.txt)
               echo $invent 
 
      
      # - run:
       #   name: Ensure back-end infrastructure exists
        #  command: |
         #   aws cloudformation deploy \
          #    --template-file .circleci/files/backend.yml \
           #   --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            #   --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
             #  --tags project=udapeople \
              # --region us-east-1

       - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1


       - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
       - destroy_frontend
       - destroy_backend   
 

      # Here's where you will add some code to rollback on failure      
  configure-infrastructure:
    docker:
       - image: python:3.7-alpine3.11
    steps:
      - checkout
    
     
      - add_ssh_keys:
             fingerprints: 
              - "ca:fe:eb:61:28:a6:90:92:e8:4a:1d:88:f6:5b:2d:9d"
              - "3d:47:17:9e:95:97:00:a0:57:b2:aa:ee:df:cb:77:2d"      
      
              # attach workspace
      - attach_workspace:
         at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      #- run: yum install -y tar gzip
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt -vvv .circleci/ansible/configure-server.yml ##--private-key udacity.pem
      - destroy_frontend
      - destroy_backend  
      # Here's where you will add some code to rollback on failure      
  run-migrations:
    docker:
           - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
          
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo apt-get update && sudo apt-get install -y awscli
            npm cache clean --force
            sudo npm install
            npm run migrations > migrations_dump.txt
           # cat ~/project/backend/migrations_dump.txt

         #  Run and save the migration output
      - run:
          name: Send migration results to memstash
          command: |
               if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
               then
                   sudo curl -k https://kvdb.io/H1MQiuLgR9fHB5N6A6k88q/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'   

               fi
     # - destroy_frontend
     # - destroy_backend 

                # Here's where you will add some code to rollback on failure      
  deploy-frontend:
        docker:
           - image: circleci/node:13.8.0
        steps:
          # Checkout code from git
          - checkout

          - run:
              name: Install dependencies
              command: |
                 cd frontend
                 sudo -s apt-get update && sudo -s apt-get install -y awscli
                 sudo -s apt-get install -y tar gzip
                 sudo -s npm install
                 
                # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
               #  touch ~/.zshrc
                # touch ~/.bashrc
               #  nvm use --delete-prefix v18.12.1
                # export NVM_DIR="$HOME/.nvm
                # nvm install --lts
                # yum install nodejs npm
                 
         #        apt update
          #       apt install software-properties-common
           #      apt install python3.8

          - run:
              name: Get backend url
              command: |
                    export BACKEND_IP=$(aws --region us-east-1 ec2 describe-instances --filters "Name=instance-state-name,Values=running" "Name=instance.group-name,Values=UdaPeople-${CIRCLE_WORKFLOW_ID:0:7}"  --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text)           
                    export API_URL="http://${BACKEND_IP}:3030"
                    echo "API_URL = ${API_URL}"
                    echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                    cat frontend/.env
          - run:
              name: Deploy frontend objects
              command: |
                 cd frontend
                 npm install
                 npm run build
                 tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                 aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive --region us-east-1
                 
                    # your code here 
          - destroy_frontend
          - destroy_backend 
  deploy-backend:
    docker:
       - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
             fingerprints: 
              - "ca:fe:eb:61:28:a6:90:92:e8:4a:1d:88:f6:5b:2d:9d"
              - "3d:47:17:9e:95:97:00:a0:57:b2:aa:ee:df:cb:77:2d"   
      - attach_workspace:
         at: ~/
      - run:
          name: Install dependencies
          command: |
                 apk add --update --no-cache tar gzip nodejs npm  ansible 
                 npm install
                 
      - run:
          name: Deploy backend
          command: |
                cd backend
                npm i
                npm run build
                cd ..
                tar -C backend -czvf artifact.tar.gz 
                cd .circleci/ansible
                echo "Contents  of the inventory.txt file is -------"
                cat ~/project/.circleci/ansible/inventory.txt
               # ansible-playbook -i ~/project/.circleci/ansible/inventory.txt deploy-backend.yml
      - destroy_frontend
      - destroy_backend 
      # Here's where you will add some code to rollback on failure  


workflows:
  default:
    jobs:
      - build-frontend:
         filters:
            branches:
              only: [dev-branch]
      - build-backend:
          filters:
            branches:
              only: [dev-branch]
      - test-frontend:
          requires: [build-frontend]
          filters:
            branches:
              only: [dev-branch]          
      - test-backend:
          requires: [build-backend]
          filters:
            branches:
              only: [dev-branch]
      - scan-backend:
          requires: [build-backend]
          filters:
            branches:
              only: [dev-branch]          
      - scan-frontend:
          requires: [build-frontend]
          filters:
            branches:
              only: [dev-branch]
     # - deploy-infrastructure
         # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
           # branches:
            #  only: [test-feature-branch]
      #- configure-infrastructure:
       #   requires: 
        #     - deploy-infrastructure 
      #- run-migrations:
       #   requires: [configure-infrastructure]
      #- deploy-frontend:
       #   requires: [run-migrations]
      - deploy-backend:
          requires: [test-backend]
      #- smoke-test:
       #   requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
       #   requires: [smoke-test]
      #- cleanup:
        #  requires: [cloudfront-update]